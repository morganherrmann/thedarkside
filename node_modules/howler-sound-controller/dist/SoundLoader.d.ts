import { EventEmitter } from "eventemitter3";
import { Howl } from 'howler';
export interface HowlSpriteObject {
    [key: string]: Array<number | boolean>;
}
export interface HowlOptions {
    src: Array<string> | string;
    volume?: number;
    loop?: boolean;
    rate?: number;
    format?: Array<string>;
    sprite?: HowlSpriteObject;
}
export interface QueueResource {
    name: string;
    howlOptions: HowlOptions;
}
export interface Sound {
    name: string;
    howl: Howl;
    sprite: string | null;
}
export interface LoadedEventPayload {
    sounds: Array<Sound>;
}
export interface ProgressEventPayload {
    progress: number;
    total: number;
}
export declare class SoundLoader extends EventEmitter {
    private loading;
    private queue;
    private loadedSounds;
    private loadingSounds;
    constructor();
    add(name: string, howlOptions: HowlOptions, sprite?: HowlSpriteObject): this;
    load(): this;
    private loadedResource();
    private reset();
    clearQueue(): void;
}
