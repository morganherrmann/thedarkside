"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var eventemitter3_1 = require("eventemitter3");
var howler_1 = require("howler");
var SoundLoader = (function (_super) {
    __extends(SoundLoader, _super);
    function SoundLoader() {
        var _this = _super.call(this) || this;
        _this.loading = false;
        _this.queue = [];
        _this.loadedSounds = 0;
        _this.loadingSounds = [];
        return _this;
    }
    SoundLoader.prototype.add = function (name, howlOptions, sprite) {
        if (sprite === void 0) { sprite = null; }
        if (this.loading) {
            return;
        }
        this.queue.push({
            name: name,
            howlOptions: howlOptions
        });
        return this;
    };
    SoundLoader.prototype.load = function () {
        var _this = this;
        if (this.loading) {
            return;
        }
        this.loading = true;
        this.loadedSounds = 0;
        this.loadingSounds = [];
        for (var i = 0; i < this.queue.length; i++) {
            var singleResource = this.queue[i];
            var spriteOpt = {};
            if (singleResource.howlOptions.sprite) {
                spriteOpt = singleResource.howlOptions.sprite;
            }
            var options = Object.assign({}, singleResource.howlOptions);
            var sound = new howler_1.Howl(options);
            if (Object.keys(spriteOpt).length === 0) {
                this.loadingSounds.push({
                    name: singleResource.name,
                    howl: sound,
                    sprite: null
                });
            }
            else {
                for (var key in spriteOpt) {
                    if (spriteOpt.hasOwnProperty(key)) {
                        this.loadingSounds.push({
                            name: key,
                            howl: sound,
                            sprite: key
                        });
                    }
                }
            }
            sound.once('load', function () {
                _this.loadedResource();
            });
            sound.once('loaderror', function (id, error) {
                _this.emit('loaderror');
                console.warn(error);
                for (var i_1 = 0; i_1 < _this.loadingSounds.length; i_1++) {
                    var s = _this.loadingSounds[i_1];
                    s.howl.off('load').off('loaderror').unload();
                }
                console.warn('sound-loader: Unable to load sound [id]: ' + id + '. Loading canceled.');
                _this.reset();
            });
        }
        return this;
    };
    SoundLoader.prototype.loadedResource = function () {
        if (!this.loading) {
            console.warn('sound-loader: Attempted to load resource without calling load() method. Can be caused in load errors');
            return;
        }
        this.loadedSounds++;
        this.emit('progress', {
            progress: this.loadedSounds,
            total: this.queue.length
        });
        if (this.loadedSounds === this.queue.length) {
            this.emit('loaded', {
                sounds: this.loadingSounds
            });
            this.reset();
        }
    };
    SoundLoader.prototype.reset = function () {
        this.loading = false;
        this.queue = [];
        this.loadedSounds = 0;
        this.loadingSounds = [];
    };
    SoundLoader.prototype.clearQueue = function () {
        if (this.loading) {
            console.log('sound-loader: Cannot clear queue now');
            return;
        }
        this.queue = [];
    };
    return SoundLoader;
}(eventemitter3_1.EventEmitter));
exports.SoundLoader = SoundLoader;
