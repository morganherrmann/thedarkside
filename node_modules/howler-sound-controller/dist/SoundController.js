"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var howler_1 = require("howler");
var SoundLoader_1 = require("./SoundLoader");
var SoundController = (function () {
    function SoundController() {
        var _this = this;
        this.loader = new SoundLoader_1.SoundLoader();
        this.sounds = {};
        this.backgroundName = null;
        this.backgroundId = null;
        this.backgroundVolume = 1;
        this.loader.on('loaded', function (event) {
            _this.registerSounds(event.sounds);
        });
    }
    SoundController.prototype.getLoader = function () {
        return this.loader;
    };
    SoundController.prototype.registerSounds = function (sounds) {
        for (var i = 0; i < sounds.length; i++) {
            var sound = sounds[i];
            if (sound.name in this.sounds) {
                console.warn('sound-controller: Sound with key "' + sound.name + '" already exists.');
            }
            else {
                this.sounds[sound.name] = sound;
            }
        }
    };
    SoundController.prototype.updateListener = function (position, orientation, orientationUp) {
        if (orientation === void 0) { orientation = null; }
        if (orientationUp === void 0) { orientationUp = null; }
        howler_1.Howler.pos(position.x, position.y, position.z);
        if (orientation === null || orientationUp === null) {
            return;
        }
        howler_1.Howler.orientation(orientation.x, orientation.y, orientation.z, orientationUp.x, orientationUp.y, orientationUp.z);
    };
    SoundController.prototype.getMasterVolume = function () {
        return howler_1.Howler.volume();
    };
    SoundController.prototype.setMasterVolume = function (val) {
        howler_1.Howler.volume(val);
    };
    SoundController.prototype.getBackgroundVolume = function () {
        return this.backgroundVolume;
    };
    SoundController.prototype.setBackgroundVolume = function (val) {
        this.backgroundVolume = val;
        this.sounds[this.backgroundName].howl.volume(val, this.backgroundId);
    };
    SoundController.prototype.playBackground = function (name, fadeOutTime, fadeInTime, smooth) {
        var _this = this;
        if (fadeOutTime === void 0) { fadeOutTime = 0; }
        if (fadeInTime === void 0) { fadeInTime = 0; }
        if (smooth === void 0) { smooth = false; }
        if (name === this.backgroundName) {
            return;
        }
        var playing = false;
        if (this.backgroundName !== null && this.backgroundId !== null) {
            playing = true;
        }
        if (playing) {
            var sound_1 = this.sounds[this.backgroundName].howl;
            var soundId_1 = this.backgroundId;
            var id_1 = null;
            if (smooth === false && name !== null) {
                id_1 = this.play(name);
                this.sounds[name].howl.pause(id_1);
                this.sounds[name].howl.loop(true, id_1);
                this.backgroundName = name;
                this.backgroundId = id_1;
            }
            sound_1.fade(this.backgroundVolume, 0, fadeOutTime, soundId_1);
            sound_1.once('fade', function () {
                sound_1.stop(soundId_1);
                if (id_1 !== null) {
                    _this.sounds[name].howl.play(id_1);
                    _this.sounds[name].howl.fade(0, _this.backgroundVolume, fadeInTime, id_1);
                }
            }, soundId_1);
        }
        if ((smooth === true || !playing) && name !== null) {
            var id_2 = this.play(name);
            this.sounds[name].howl.loop(true, id_2);
            this.backgroundName = name;
            this.backgroundId = id_2;
            this.sounds[name].howl.once('play', function () {
                _this.sounds[name].howl.fade(0, _this.backgroundVolume, fadeInTime, id_2);
            }, id_2);
        }
        if (name === null) {
            this.backgroundId = null;
            this.backgroundName = null;
        }
    };
    SoundController.prototype.play = function (name) {
        if (name in this.sounds) {
            if (this.sounds[name].sprite === name) {
                return this.sounds[name].howl.play(name);
            }
            else {
                return this.sounds[name].howl.play();
            }
        }
        else {
            console.log('sound-controller: Sound "' + name + '" does not exists.');
        }
    };
    SoundController.prototype.playSpatial = function (name, position, pannerAttr, orientation) {
        if (orientation === void 0) { orientation = null; }
        if (name in this.sounds) {
            var soundId_2;
            var sound_2 = this.sounds[name].howl;
            if (this.sounds[name].sprite === name) {
                soundId_2 = sound_2.play(name);
            }
            else {
                soundId_2 = sound_2.play();
            }
            sound_2.once('play', function () {
                sound_2.pos(position.x, position.y, position.z, soundId_2);
                if (orientation !== null) {
                    sound_2.orientation(orientation.x, orientation.y, orientation.z, soundId_2);
                }
                sound_2.pannerAttr(pannerAttr, soundId_2);
            }, soundId_2);
            return soundId_2;
        }
        else {
            console.log('sound-controller: Sound "' + name + '" does not exists.');
        }
    };
    SoundController.prototype.stop = function (name, id) {
        if (id === void 0) { id = null; }
        if (name in this.sounds) {
            if (id === null) {
                this.sounds[name].howl.stop();
                this.backgroundId = null;
                this.backgroundName = null;
                return this;
            }
            else {
                this.sounds[name].howl.stop(id);
                return this;
            }
        }
        else {
            console.log('sound-controller: Sound "' + name + '" does not exists.');
        }
    };
    SoundController.prototype.get = function (name) {
        if (name in this.sounds) {
            return this.sounds[name];
        }
        else {
            console.log('sound-controller: Sound "' + name + '" does not exists.');
        }
    };
    SoundController.prototype.getAll = function () {
        return this.sounds;
    };
    return SoundController;
}());
exports.SoundController = SoundController;
